(ns sudoku.core-test
  (:require [clojure.test :refer [deftest is testing]]
            [sudoku.core  :refer [solve-sudoku]]))

(deftest sudoku-test
  (testing "board 1"
    (is (= true (solve-sudoku
                 [[0 1 6 4 0 0 0 0 0]
                  [2 0 0 0 0 9 0 0 0]
                  [4 0 0 0 0 0 0 6 2]
                  [0 7 0 2 3 0 1 0 0]
                  [1 0 0 0 0 0 0 0 3]
                  [0 0 3 0 8 7 0 4 0]
                  [9 6 0 0 0 0 0 0 5]
                  [0 0 0 8 0 0 0 0 7]
                  [0 0 0 0 0 6 8 2 0]]))))

  (testing "board 2"
    (is (= true (solve-sudoku
                 [[0 4 9 0 0 8 6 0 5]
                  [0 0 3 0 0 7 0 0 0]
                  [0 0 0 0 0 0 0 3 0]
                  [0 0 0 4 0 0 8 0 0]
                  [0 6 0 8 1 5 0 2 0]
                  [0 0 1 0 0 9 0 0 0]
                  [0 1 0 0 0 0 0 0 0]
                  [0 0 0 6 0 0 4 0 0]
                  [8 0 4 5 0 0 3 9 0]]))))

  (testing "board 3"
    (is (= true (solve-sudoku
                 [[7 6 0 5 0 0 0 0 0]
                  [0 0 0 0 6 0 0 0 8]
                  [0 0 0 0 0 0 4 0 3]
                  [2 0 0 4 0 0 8 0 0]
                  [0 8 0 0 0 0 0 3 0]
                  [0 0 5 0 0 1 0 0 7]
                  [8 0 9 0 0 0 0 0 0]
                  [6 0 0 0 1 0 0 0 0]
                  [0 0 0 0 0 3 0 4 1]]))))

  (testing "board 4"
    (is (= true (solve-sudoku
                 [[0 0 0 6 0 5 0 0 0]
                  [0 0 3 0 2 0 8 0 0]
                  [0 4 5 0 9 0 2 7 0]
                  [5 0 0 0 0 0 0 0 1]
                  [0 6 2 0 0 0 5 4 0]
                  [4 0 0 0 0 0 0 0 7]
                  [0 9 8 0 6 0 4 5 0]
                  [0 0 6 0 4 0 7 0 0]
                  [0 0 0 2 0 3 0 0 0]]))))

  (testing "board 5"
    (is (= true (solve-sudoku
                 [[4 0 9 0 0 0 7 0 5]
                  [0 0 0 0 1 0 0 0 0]
                  [0 0 6 2 0 7 8 0 0]
                  [2 0 0 0 0 0 0 0 9]
                  [0 0 3 7 0 4 2 0 0]
                  [8 0 0 0 0 0 0 0 4]
                  [0 0 2 8 0 1 5 0 0]
                  [0 0 0 0 6 0 0 0 0]
                  [9 0 5 0 0 0 4 0 6]]))))

  (testing "board 6"
    (is (= true (solve-sudoku
                 [[0 0 0 0 1 0 0 3 0]
                  [0 4 0 0 7 0 5 0 1]
                  [0 0 2 0 0 8 0 0 6]
                  [6 8 0 0 0 0 0 0 3]
                  [0 0 0 3 0 2 0 0 0]
                  [3 0 0 0 0 0 0 4 5]
                  [2 0 0 5 0 0 8 0 0]
                  [8 0 1 0 4 0 0 2 0]
                  [0 9 0 0 2 0 0 0 0]]))))

  (testing "board 7"
    (is (= true (solve-sudoku
                 [[0 8 0 0 7 0 0 3 0]
                  [2 6 0 0 5 0 0 1 8]
                  [0 0 0 0 0 0 4 0 0]
                  [0 0 0 6 0 2 0 0 0]
                  [3 9 0 0 1 0 0 8 6]
                  [0 0 0 7 0 9 0 0 0]
                  [0 0 4 0 0 0 8 0 0]
                  [8 1 0 0 4 0 0 5 2]
                  [0 5 0 0 9 0 0 7 0]]))))

  (testing "board 8"
    (is (= true (solve-sudoku
                 [[0 0 0 0 9 3 0 0 6]
                  [0 0 0 8 0 0 9 0 0]
                  [0 2 0 0 0 6 1 0 0]
                  [0 0 0 0 8 0 0 5 3]
                  [0 0 6 0 0 0 2 0 0]
                  [3 7 0 0 5 0 0 0 0]
                  [0 0 2 5 0 0 0 4 0]
                  [0 0 1 0 0 9 0 0 0]
                  [7 0 0 1 3 0 0 0 0]]))))

  ; Gordon Royle's web page: https://bit.ly/2WXNExd
  ; See also sudoko17 text file in the repo.
  (testing "board 9"
    (is (= true (solve-sudoku
                 [[0 0 0 0 0 0 0 1 0]
                  [4 0 0 0 0 0 0 0 0]
                  [0 2 0 0 0 0 0 0 0]
                  [0 0 0 0 5 0 4 0 7]
                  [0 0 8 0 0 0 3 0 0]
                  [0 0 1 0 9 0 0 0 0]
                  [3 0 0 4 0 0 2 0 0]
                  [0 5 0 1 0 0 0 0 0]
                  [0 0 0 8 0 6 0 0 0]]))))

  (testing "board 10"
    (is (= true (solve-sudoku
                 [[0 0 0 0 0 0 0 1 0]
                  [4 0 0 0 0 0 0 0 0]
                  [0 2 0 0 0 0 0 0 0]
                  [0 0 0 0 5 0 6 0 4]
                  [0 0 8 0 0 0 3 0 0]
                  [0 0 1 0 9 0 0 0 0]
                  [3 0 0 4 0 0 2 0 0]
                  [0 5 0 1 0 0 0 0 0]
                  [0 0 0 8 0 7 0 0 0]]))))

  ; The most difficult puzzle by Arto Inkala
  ; https://bit.ly/36Boc3T
  (testing "board 11"
    (is (= true (solve-sudoku
                 [[0 0 5 3 0 0 0 0 0]
                  [8 0 0 0 0 0 0 2 0]
                  [0 7 0 0 1 0 5 0 0]
                  [4 0 0 0 0 5 3 0 0]
                  [0 1 0 0 7 0 0 0 6]
                  [0 0 3 2 0 0 0 8 0]
                  [0 6 0 5 0 0 0 0 9]
                  [0 0 4 0 0 0 0 3 0]
                  [0 0 0 0 0 9 7 0 0]])))))

